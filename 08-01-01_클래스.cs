using System;

// > 클래스란?
/// - 특정한 종류의 객체를 만들기 위한 수단입니다.
/// - 데이터와 메서드를 묶는 집합이며, 하나의 데이터 형식
/// 다른 "기본 데이터 형식"가 다르게 클래스 "복합 데이터 형식" 임과 동시에
/// 참조 형식이다.

// > 복합 데이터 형식란?
/// - 기본 데이터 형식을 조합해서 만든 새로운 타입을 의미합니다.

// > 객체(instance)?
// - 어떤 특정한 형태로 만들어진 결과를 의미합니다.

// > 클래스는 속성(필드=변수), 기능(메서드)으로 이루어져 있습니다.
// = 필드 : 클래스 내부에 선언된 멤버 변수를 의미합니다.
// = 멤버 : 클래스 내부에 선언된 요소들을 의미합니다.

class MyClass
{
	// > 클래스 내부에서는 해당 클래스 형태로 만들어진 객체가 가질 기능과
	// 속성을 정의합니다.

	// 여기에 MyClass의 필드를 선언합니다.
	public int Variable;
	// public : 접근 제한자
	// 외부에서 해당하는 멤버를 직접적으로 접근할 수 있도록 만듭니다.

	// 멤버 변수(필드)에서 초기화를 하지 않은 경우
	// 값 형식이라면 기본값(정수 : 0, 실수 : 0.0)
	// 참조형식이라면 null 값이 들어가게 됩니다.
	public void PrintVariable()
	{
		Console.WriteLine("Variable = " + Variable);
	}
}

class _01_클래스
{
	static void Main()
	{
		// MyClass형식의 객체를 생성
		MyClass myClass = new MyClass();
		// - MyClass 형식의 객체를 힙에 동적 할당하고
		// 스택에 할당된 myClass 변수가 가르키도록(참조하도록) 합니다.

		// 동적 할당 ?
		// - 런타임 중에 메모리 할당이 이루어지는 것을 의미합니다.
		//   동적 할당으로 생성된 메모리는 힙 메모리 영역에 할당됩니다.

		// > new MyClass()?
		// - MyClass의 생성자를 호출하며, 생성된 객체를 반환합니다.
		// - new ? 참조 형식일 경우 힙 메모리에 객체를 생성
		//			값 형식일 경우 해당 셩식의 객체를 스택에 생성

		// 생성된 MyClass 형식의 객체의 멤버를 사용하는 방법
		// - 멤버 접근 연산자 : '.'을 사용합니다.
		myClass.Variable = 10;
		// 값을 출력
		Console.WriteLine("MyClass.Variable = " + myClass.Variable);

		myClass.PrintVariable();
	}
}

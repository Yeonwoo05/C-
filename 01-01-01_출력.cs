// , /* ~ */ : 주석
// 주석 ? 프로그램 코드의 설명을 위해서 붙입니다.
// 실제 프로그램이 동작 할 때에는 아무 영향을 받지 않습니다.
//, /// : 한줄짜리 주석입니다.
// /* */ : 문단주석
/* 
  안녕하세요
  재밌는 코딩 시간입니다.
  재밌져?
*/

using System;
// > using System : System namespace를 사용하겠다! 라고 컴파일러에게 알려줍니다.
/// - using : 바로 뒤에 오는 네임 스페이스를 사용하겠다라고 컴파일러에게 알려줍니다.
/// - System : C# 코드가 기본적으로 필요로 하는 클래스를 포함하는 namespcae 입니다.
/// - ; : 문장의 끝을 알리는 기호입니다.

// namespace _01_출력 { ... } : 네임스페이스 "_01_출력" 입니다.
/// - 네임 스페이스 ? 동작하는 방식이 비슷한 클래스, 구조체, 인터페이스, 대리자, 열거형식
/// 등 하나의 이름 아래로 묶는 역할을 합니다.
/// { ... } : 네임 스페이스의 영역을 나타내며, "코드 블록" (코드의 영역) 이라고 합니다.
///			  항상 여는 중괄호 "{" 로 시작해서 영역이 열렸음을 이야기 하며 닫는 중괄호 "}" 를
///			  통해서 영역의 끝을 알립니다.
namespace _01_출력
{

	// class _01_출력 : "_01_출력" 이라는 이름을 가진 클래스를 의미합니다.
	/// C# 에서 클래스란?
	///		- 프로그램을 구성하는 기본 단위
	///		- 어떤 실체를 만들기 위한 형틀을 제작하는 방법중 하나입니다.
	///		- 클래스는 기본적으로 '데이터' 와 '메서드'(데이터를 처리하는 기능) 로
	///		이루어져 있습니다.
	class _01_출력
	{
		// > static void Main(string[] args) { ... } : static 데이터형 배열을 매개변수로 갖는
		/// 'Main' 이라는 이름을 가지고 있는 static 메서드입니다.
		/// 
		/// static : 메서드나 변수를 수식하는 [한정자]입니다.
		/// - static 키워드를 사용하면 프로그램이 처음 구동될때 메모리에 할당이 됩니다.
		//
		/// void : 반환 형식입니다.
		/// - 이 메서드가 어떤 형식의 데이터를 반환하는지 명시합니다.
		//
		/// Main : 프로그램의 시작지점을 알리는 이름입니다.
		/// - 무조건 [Main] 이라는 이름으로 작명해야 한다.
		/// - 프로그램에 무조건 하나만 존재해야 합니다.
		/// - "Entry Point"라고 합니다.
		/// 
		/// (string[] args) : 매개 변수(Parameter)라고 합니다.
		/// - 매개변수 ? 어떤 메서드가 함수를 실행시키기 위한 필요한 부품을 전달하는 변수
		static void Main(string[] args)
		{
			// 콘솔창에 어떤 결과를 출력하는 방법
			/// - Console.Write() / Console.WriteLine()
			Console.Write("Hello World!\n");
			/// > Console.Write() : 지정한 문자열을 출력시키는 일을 합니다.
			/// - \n : 개행 문자

			Console.WriteLine("Hello World!");
			// Console.WriteLine() : 지정한 문자열을 출력시키며, 출력이 끝난 후 개행까지 합니다.

			// Console 클래스 : 콘솔 응용프로그램의 입출력을 사용할 수 있는 클래스

			// > "Hello World" ?
			// - 매개변수에 전달할 인수
			// "문자열 리터럴 데이터"

			// > 문자열 리터럴 데이터?
			// - 문자열 : 문자들의 집합으로 데이터 형식 중 한가지
			// 데이터의 시작과 끝에 큰 따옴표 ("")를 사용해서 문자열 데이터를 나타냅니다.
			// - 리터럴 데이터?
			// 데이터 그자체를 의미한다.
		
		} // Main 메서드가 끝나는 위치
	} // _01_출력 클래스가 끝나는 위치
} // _01_출력 네임스페이스가 끝나는 위치